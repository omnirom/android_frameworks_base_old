// Signature format: 2.0
package com.android.server.display.config {

  public class AutoBrightness {
    ctor public AutoBrightness();
    method public final java.math.BigInteger getBrighteningLightDebounceIdleMillis();
    method public final java.math.BigInteger getBrighteningLightDebounceMillis();
    method public final java.math.BigInteger getDarkeningLightDebounceIdleMillis();
    method public final java.math.BigInteger getDarkeningLightDebounceMillis();
    method public boolean getEnabled();
    method public final com.android.server.display.config.LuxToBrightnessMapping getLuxToBrightnessMapping();
    method public final void setBrighteningLightDebounceIdleMillis(java.math.BigInteger);
    method public final void setBrighteningLightDebounceMillis(java.math.BigInteger);
    method public final void setDarkeningLightDebounceIdleMillis(java.math.BigInteger);
    method public final void setDarkeningLightDebounceMillis(java.math.BigInteger);
    method public void setEnabled(boolean);
    method public final void setLuxToBrightnessMapping(com.android.server.display.config.LuxToBrightnessMapping);
  }

  public class BlockingZoneConfig {
    ctor public BlockingZoneConfig();
    method public final com.android.server.display.config.BlockingZoneThreshold getBlockingZoneThreshold();
    method public final java.math.BigInteger getDefaultRefreshRate();
    method @Nullable public final String getRefreshRateThermalThrottlingId();
    method public final void setBlockingZoneThreshold(com.android.server.display.config.BlockingZoneThreshold);
    method public final void setDefaultRefreshRate(java.math.BigInteger);
    method public final void setRefreshRateThermalThrottlingId(@Nullable String);
  }

  public class BlockingZoneThreshold {
    ctor public BlockingZoneThreshold();
    method public final java.util.List<com.android.server.display.config.DisplayBrightnessPoint> getDisplayBrightnessPoint();
  }

  public class BrightnessLimitMap {
    ctor public BrightnessLimitMap();
    method @NonNull public final com.android.server.display.config.NonNegativeFloatToFloatMap getMap();
    method @NonNull public final com.android.server.display.config.PredefinedBrightnessLimitNames getType();
    method public final void setMap(@NonNull com.android.server.display.config.NonNegativeFloatToFloatMap);
    method public final void setType(@NonNull com.android.server.display.config.PredefinedBrightnessLimitNames);
  }

  public class BrightnessThresholds {
    ctor public BrightnessThresholds();
    method public final com.android.server.display.config.ThresholdPoints getBrightnessThresholdPoints();
    method @NonNull public final java.math.BigDecimal getMinimum();
    method public final void setBrightnessThresholdPoints(com.android.server.display.config.ThresholdPoints);
    method public final void setMinimum(@NonNull java.math.BigDecimal);
  }

  public class BrightnessThrottlingMap {
    ctor public BrightnessThrottlingMap();
    method @NonNull public final java.util.List<com.android.server.display.config.BrightnessThrottlingPoint> getBrightnessThrottlingPoint();
    method public String getId();
    method public void setId(String);
  }

  public class BrightnessThrottlingPoint {
    ctor public BrightnessThrottlingPoint();
    method @NonNull public final java.math.BigDecimal getBrightness();
    method @NonNull public final com.android.server.display.config.ThermalStatus getThermalStatus();
    method public final void setBrightness(@NonNull java.math.BigDecimal);
    method public final void setThermalStatus(@NonNull com.android.server.display.config.ThermalStatus);
  }

  public class Density {
    ctor public Density();
    method @NonNull public final java.math.BigInteger getDensity();
    method @NonNull public final java.math.BigInteger getHeight();
    method @NonNull public final java.math.BigInteger getWidth();
    method public final void setDensity(@NonNull java.math.BigInteger);
    method public final void setHeight(@NonNull java.math.BigInteger);
    method public final void setWidth(@NonNull java.math.BigInteger);
  }

  public class DensityMapping {
    ctor public DensityMapping();
    method public java.util.List<com.android.server.display.config.Density> getDensity();
  }

  public class DisplayBrightnessPoint {
    ctor public DisplayBrightnessPoint();
    method public final java.math.BigInteger getLux();
    method public final java.math.BigDecimal getNits();
    method public final void setLux(java.math.BigInteger);
    method public final void setNits(java.math.BigDecimal);
  }

  public class DisplayConfiguration {
    ctor public DisplayConfiguration();
    method @NonNull public final com.android.server.display.config.Thresholds getAmbientBrightnessChangeThresholds();
    method public final com.android.server.display.config.Thresholds getAmbientBrightnessChangeThresholdsIdle();
    method public final java.math.BigInteger getAmbientLightHorizonLong();
    method public final java.math.BigInteger getAmbientLightHorizonShort();
    method public com.android.server.display.config.AutoBrightness getAutoBrightness();
    method @Nullable public final com.android.server.display.config.DensityMapping getDensityMapping();
    method @NonNull public final com.android.server.display.config.Thresholds getDisplayBrightnessChangeThresholds();
    method public final com.android.server.display.config.Thresholds getDisplayBrightnessChangeThresholdsIdle();
    method @Nullable public final com.android.server.display.config.HdrBrightnessConfig getHdrBrightnessConfig();
    method public com.android.server.display.config.HighBrightnessMode getHighBrightnessMode();
    method public final com.android.server.display.config.SensorDetails getLightSensor();
    method public com.android.server.display.config.LuxThrottling getLuxThrottling();
    method @Nullable public final String getName();
    method public com.android.server.display.config.PowerThrottlingConfig getPowerThrottlingConfig();
    method public final com.android.server.display.config.SensorDetails getProxSensor();
    method public com.android.server.display.config.DisplayQuirks getQuirks();
    method public com.android.server.display.config.RefreshRateConfigs getRefreshRate();
    method public final java.math.BigDecimal getScreenBrightnessCapForWearBedtimeMode();
    method @NonNull public final java.math.BigDecimal getScreenBrightnessDefault();
    method @NonNull public final com.android.server.display.config.NitsMap getScreenBrightnessMap();
    method public final java.math.BigInteger getScreenBrightnessRampDecreaseMaxIdleMillis();
    method public final java.math.BigInteger getScreenBrightnessRampDecreaseMaxMillis();
    method public final java.math.BigDecimal getScreenBrightnessRampFastDecrease();
    method public final java.math.BigDecimal getScreenBrightnessRampFastIncrease();
    method public final java.math.BigInteger getScreenBrightnessRampIncreaseMaxIdleMillis();
    method public final java.math.BigInteger getScreenBrightnessRampIncreaseMaxMillis();
    method public final java.math.BigDecimal getScreenBrightnessRampSlowDecrease();
    method public final java.math.BigDecimal getScreenBrightnessRampSlowDecreaseIdle();
    method public final java.math.BigDecimal getScreenBrightnessRampSlowIncrease();
    method public final java.math.BigDecimal getScreenBrightnessRampSlowIncreaseIdle();
    method public final com.android.server.display.config.SensorDetails getScreenOffBrightnessSensor();
    method public final com.android.server.display.config.IntegerArray getScreenOffBrightnessSensorValueToLux();
    method @NonNull public final com.android.server.display.config.ThermalThrottling getThermalThrottling();
    method public final com.android.server.display.config.UsiVersion getUsiVersion();
    method public final void setAmbientBrightnessChangeThresholds(@NonNull com.android.server.display.config.Thresholds);
    method public final void setAmbientBrightnessChangeThresholdsIdle(com.android.server.display.config.Thresholds);
    method public final void setAmbientLightHorizonLong(java.math.BigInteger);
    method public final void setAmbientLightHorizonShort(java.math.BigInteger);
    method public void setAutoBrightness(com.android.server.display.config.AutoBrightness);
    method public final void setDensityMapping(@Nullable com.android.server.display.config.DensityMapping);
    method public final void setDisplayBrightnessChangeThresholds(@NonNull com.android.server.display.config.Thresholds);
    method public final void setDisplayBrightnessChangeThresholdsIdle(com.android.server.display.config.Thresholds);
    method public final void setHdrBrightnessConfig(@Nullable com.android.server.display.config.HdrBrightnessConfig);
    method public void setHighBrightnessMode(com.android.server.display.config.HighBrightnessMode);
    method public final void setLightSensor(com.android.server.display.config.SensorDetails);
    method public void setLuxThrottling(com.android.server.display.config.LuxThrottling);
    method public final void setName(@Nullable String);
    method public void setPowerThrottlingConfig(com.android.server.display.config.PowerThrottlingConfig);
    method public final void setProxSensor(com.android.server.display.config.SensorDetails);
    method public void setQuirks(com.android.server.display.config.DisplayQuirks);
    method public void setRefreshRate(com.android.server.display.config.RefreshRateConfigs);
    method public final void setScreenBrightnessCapForWearBedtimeMode(java.math.BigDecimal);
    method public final void setScreenBrightnessDefault(@NonNull java.math.BigDecimal);
    method public final void setScreenBrightnessMap(@NonNull com.android.server.display.config.NitsMap);
    method public final void setScreenBrightnessRampDecreaseMaxIdleMillis(java.math.BigInteger);
    method public final void setScreenBrightnessRampDecreaseMaxMillis(java.math.BigInteger);
    method public final void setScreenBrightnessRampFastDecrease(java.math.BigDecimal);
    method public final void setScreenBrightnessRampFastIncrease(java.math.BigDecimal);
    method public final void setScreenBrightnessRampIncreaseMaxIdleMillis(java.math.BigInteger);
    method public final void setScreenBrightnessRampIncreaseMaxMillis(java.math.BigInteger);
    method public final void setScreenBrightnessRampSlowDecrease(java.math.BigDecimal);
    method public final void setScreenBrightnessRampSlowDecreaseIdle(java.math.BigDecimal);
    method public final void setScreenBrightnessRampSlowIncrease(java.math.BigDecimal);
    method public final void setScreenBrightnessRampSlowIncreaseIdle(java.math.BigDecimal);
    method public final void setScreenOffBrightnessSensor(com.android.server.display.config.SensorDetails);
    method public final void setScreenOffBrightnessSensorValueToLux(com.android.server.display.config.IntegerArray);
    method public final void setThermalThrottling(@NonNull com.android.server.display.config.ThermalThrottling);
    method public final void setUsiVersion(com.android.server.display.config.UsiVersion);
  }

  public class DisplayQuirks {
    ctor public DisplayQuirks();
    method public java.util.List<java.lang.String> getQuirk();
  }

  public class HbmTiming {
    ctor public HbmTiming();
    method @NonNull public final java.math.BigInteger getTimeMaxSecs_all();
    method @NonNull public final java.math.BigInteger getTimeMinSecs_all();
    method @NonNull public final java.math.BigInteger getTimeWindowSecs_all();
    method public final void setTimeMaxSecs_all(@NonNull java.math.BigInteger);
    method public final void setTimeMinSecs_all(@NonNull java.math.BigInteger);
    method public final void setTimeWindowSecs_all(@NonNull java.math.BigInteger);
  }

  public class HdrBrightnessConfig {
    ctor public HdrBrightnessConfig();
    method public final java.math.BigInteger getBrightnessDecreaseDebounceMillis();
    method public final java.math.BigInteger getBrightnessIncreaseDebounceMillis();
    method @NonNull public final com.android.server.display.config.NonNegativeFloatToFloatMap getBrightnessMap();
    method public final java.math.BigDecimal getScreenBrightnessRampDecrease();
    method public final java.math.BigDecimal getScreenBrightnessRampIncrease();
    method public final void setBrightnessDecreaseDebounceMillis(java.math.BigInteger);
    method public final void setBrightnessIncreaseDebounceMillis(java.math.BigInteger);
    method public final void setBrightnessMap(@NonNull com.android.server.display.config.NonNegativeFloatToFloatMap);
    method public final void setScreenBrightnessRampDecrease(java.math.BigDecimal);
    method public final void setScreenBrightnessRampIncrease(java.math.BigDecimal);
  }

  public class HighBrightnessMode {
    ctor public HighBrightnessMode();
    method @NonNull public final boolean getAllowInLowPowerMode_all();
    method public boolean getEnabled();
    method @Nullable public final java.math.BigDecimal getMinimumHdrPercentOfScreen_all();
    method @NonNull public final java.math.BigDecimal getMinimumLux_all();
    method @Nullable public final com.android.server.display.config.RefreshRateRange getRefreshRate_all();
    method @Nullable public final com.android.server.display.config.SdrHdrRatioMap getSdrHdrRatioMap_all();
    method public com.android.server.display.config.HbmTiming getTiming_all();
    method @NonNull public final java.math.BigDecimal getTransitionPoint_all();
    method public final void setAllowInLowPowerMode_all(@NonNull boolean);
    method public void setEnabled(boolean);
    method public final void setMinimumHdrPercentOfScreen_all(@Nullable java.math.BigDecimal);
    method public final void setMinimumLux_all(@NonNull java.math.BigDecimal);
    method public final void setRefreshRate_all(@Nullable com.android.server.display.config.RefreshRateRange);
    method public final void setSdrHdrRatioMap_all(@Nullable com.android.server.display.config.SdrHdrRatioMap);
    method public void setTiming_all(com.android.server.display.config.HbmTiming);
    method public final void setTransitionPoint_all(@NonNull java.math.BigDecimal);
  }

  public class IntegerArray {
    ctor public IntegerArray();
    method public java.util.List<java.math.BigInteger> getItem();
  }

  public class LuxThrottling {
    ctor public LuxThrottling();
    method @NonNull public final java.util.List<com.android.server.display.config.BrightnessLimitMap> getBrightnessLimitMap();
  }

  public class LuxToBrightnessMapping {
    ctor public LuxToBrightnessMapping();
    method @NonNull public final com.android.server.display.config.NonNegativeFloatToFloatMap getMap();
    method public final void setMap(@NonNull com.android.server.display.config.NonNegativeFloatToFloatMap);
  }

  public class NitsMap {
    ctor public NitsMap();
    method public String getInterpolation();
    method @NonNull public final java.util.List<com.android.server.display.config.Point> getPoint();
    method public void setInterpolation(String);
  }

  public class NonNegativeFloatToFloatMap {
    ctor public NonNegativeFloatToFloatMap();
    method @NonNull public final java.util.List<com.android.server.display.config.NonNegativeFloatToFloatPoint> getPoint();
  }

  public class NonNegativeFloatToFloatPoint {
    ctor public NonNegativeFloatToFloatPoint();
    method @NonNull public final java.math.BigDecimal getFirst();
    method @NonNull public final java.math.BigDecimal getSecond();
    method public final void setFirst(@NonNull java.math.BigDecimal);
    method public final void setSecond(@NonNull java.math.BigDecimal);
  }

  public class Point {
    ctor public Point();
    method @NonNull public final java.math.BigDecimal getNits();
    method @NonNull public final java.math.BigDecimal getValue();
    method public final void setNits(@NonNull java.math.BigDecimal);
    method public final void setValue(@NonNull java.math.BigDecimal);
  }

  public class PowerThrottlingConfig {
    ctor public PowerThrottlingConfig();
    method @NonNull public final java.math.BigDecimal getBrightnessLowestCapAllowed();
    method @NonNull public final java.math.BigInteger getPollingWindowMillis();
    method public final java.util.List<com.android.server.display.config.PowerThrottlingMap> getPowerThrottlingMap();
    method public final void setBrightnessLowestCapAllowed(@NonNull java.math.BigDecimal);
    method public final void setPollingWindowMillis(@NonNull java.math.BigInteger);
  }

  public class PowerThrottlingMap {
    ctor public PowerThrottlingMap();
    method public String getId();
    method @NonNull public final java.util.List<com.android.server.display.config.PowerThrottlingPoint> getPowerThrottlingPoint();
    method public void setId(String);
  }

  public class PowerThrottlingPoint {
    ctor public PowerThrottlingPoint();
    method @NonNull public final java.math.BigDecimal getPowerQuotaMilliWatts();
    method @NonNull public final com.android.server.display.config.ThermalStatus getThermalStatus();
    method public final void setPowerQuotaMilliWatts(@NonNull java.math.BigDecimal);
    method public final void setThermalStatus(@NonNull com.android.server.display.config.ThermalStatus);
  }

  public enum PredefinedBrightnessLimitNames {
    method public String getRawName();
    enum_constant public static final com.android.server.display.config.PredefinedBrightnessLimitNames _default;
    enum_constant public static final com.android.server.display.config.PredefinedBrightnessLimitNames adaptive;
  }

  public class RefreshRateConfigs {
    ctor public RefreshRateConfigs();
    method public final java.math.BigInteger getDefaultPeakRefreshRate();
    method public final java.math.BigInteger getDefaultRefreshRate();
    method public final java.math.BigInteger getDefaultRefreshRateInHbmHdr();
    method public final java.math.BigInteger getDefaultRefreshRateInHbmSunlight();
    method public final com.android.server.display.config.BlockingZoneConfig getHigherBlockingZoneConfigs();
    method public final com.android.server.display.config.BlockingZoneConfig getLowerBlockingZoneConfigs();
    method public final com.android.server.display.config.RefreshRateZoneProfiles getRefreshRateZoneProfiles();
    method public final void setDefaultPeakRefreshRate(java.math.BigInteger);
    method public final void setDefaultRefreshRate(java.math.BigInteger);
    method public final void setDefaultRefreshRateInHbmHdr(java.math.BigInteger);
    method public final void setDefaultRefreshRateInHbmSunlight(java.math.BigInteger);
    method public final void setHigherBlockingZoneConfigs(com.android.server.display.config.BlockingZoneConfig);
    method public final void setLowerBlockingZoneConfigs(com.android.server.display.config.BlockingZoneConfig);
    method public final void setRefreshRateZoneProfiles(com.android.server.display.config.RefreshRateZoneProfiles);
  }

  public class RefreshRateRange {
    ctor public RefreshRateRange();
    method public final java.math.BigInteger getMaximum();
    method public final java.math.BigInteger getMinimum();
    method public final void setMaximum(java.math.BigInteger);
    method public final void setMinimum(java.math.BigInteger);
  }

  public class RefreshRateThrottlingMap {
    ctor public RefreshRateThrottlingMap();
    method public String getId();
    method @NonNull public final java.util.List<com.android.server.display.config.RefreshRateThrottlingPoint> getRefreshRateThrottlingPoint();
    method public void setId(String);
  }

  public class RefreshRateThrottlingPoint {
    ctor public RefreshRateThrottlingPoint();
    method @NonNull public final com.android.server.display.config.RefreshRateRange getRefreshRateRange();
    method @NonNull public final com.android.server.display.config.ThermalStatus getThermalStatus();
    method public final void setRefreshRateRange(@NonNull com.android.server.display.config.RefreshRateRange);
    method public final void setThermalStatus(@NonNull com.android.server.display.config.ThermalStatus);
  }

  public class RefreshRateZone {
    ctor public RefreshRateZone();
    method public String getId();
    method public final com.android.server.display.config.RefreshRateRange getRefreshRateRange();
    method public void setId(String);
    method public final void setRefreshRateRange(com.android.server.display.config.RefreshRateRange);
  }

  public class RefreshRateZoneProfiles {
    ctor public RefreshRateZoneProfiles();
    method public final java.util.List<com.android.server.display.config.RefreshRateZone> getRefreshRateZoneProfile();
  }

  public class SdrHdrRatioMap {
    ctor public SdrHdrRatioMap();
    method @NonNull public final java.util.List<com.android.server.display.config.SdrHdrRatioPoint> getPoint();
  }

  public class SdrHdrRatioPoint {
    ctor public SdrHdrRatioPoint();
    method @NonNull public final java.math.BigDecimal getHdrRatio();
    method @NonNull public final java.math.BigDecimal getSdrNits();
    method public final void setHdrRatio(@NonNull java.math.BigDecimal);
    method public final void setSdrNits(@NonNull java.math.BigDecimal);
  }

  public class SensorDetails {
    ctor public SensorDetails();
    method @Nullable public final String getName();
    method @Nullable public final com.android.server.display.config.RefreshRateRange getRefreshRate();
    method @Nullable public final com.android.server.display.config.NonNegativeFloatToFloatMap getSupportedModes();
    method @Nullable public final String getType();
    method public final void setName(@Nullable String);
    method public final void setRefreshRate(@Nullable com.android.server.display.config.RefreshRateRange);
    method public final void setSupportedModes(@Nullable com.android.server.display.config.NonNegativeFloatToFloatMap);
    method public final void setType(@Nullable String);
  }

  public enum ThermalStatus {
    method public String getRawName();
    enum_constant public static final com.android.server.display.config.ThermalStatus critical;
    enum_constant public static final com.android.server.display.config.ThermalStatus emergency;
    enum_constant public static final com.android.server.display.config.ThermalStatus light;
    enum_constant public static final com.android.server.display.config.ThermalStatus moderate;
    enum_constant public static final com.android.server.display.config.ThermalStatus none;
    enum_constant public static final com.android.server.display.config.ThermalStatus severe;
    enum_constant public static final com.android.server.display.config.ThermalStatus shutdown;
  }

  public class ThermalThrottling {
    ctor public ThermalThrottling();
    method public final java.util.List<com.android.server.display.config.BrightnessThrottlingMap> getBrightnessThrottlingMap();
    method public final java.util.List<com.android.server.display.config.RefreshRateThrottlingMap> getRefreshRateThrottlingMap();
  }

  public class ThresholdPoint {
    ctor public ThresholdPoint();
    method @NonNull public final java.math.BigDecimal getPercentage();
    method @NonNull public final java.math.BigDecimal getThreshold();
    method public final void setPercentage(@NonNull java.math.BigDecimal);
    method public final void setThreshold(@NonNull java.math.BigDecimal);
  }

  public class ThresholdPoints {
    ctor public ThresholdPoints();
    method @NonNull public final java.util.List<com.android.server.display.config.ThresholdPoint> getBrightnessThresholdPoint();
  }

  public class Thresholds {
    ctor public Thresholds();
    method @NonNull public final com.android.server.display.config.BrightnessThresholds getBrighteningThresholds();
    method @NonNull public final com.android.server.display.config.BrightnessThresholds getDarkeningThresholds();
    method public final void setBrighteningThresholds(@NonNull com.android.server.display.config.BrightnessThresholds);
    method public final void setDarkeningThresholds(@NonNull com.android.server.display.config.BrightnessThresholds);
  }

  public class UsiVersion {
    ctor public UsiVersion();
    method public final java.math.BigInteger getMajorVersion();
    method public final java.math.BigInteger getMinorVersion();
    method public final void setMajorVersion(java.math.BigInteger);
    method public final void setMinorVersion(java.math.BigInteger);
  }

  public class XmlParser {
    ctor public XmlParser();
    method public static com.android.server.display.config.DisplayConfiguration read(java.io.InputStream) throws javax.xml.datatype.DatatypeConfigurationException, java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method public static String readText(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
    method public static void skip(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  }

}

