page.title=다양한 화면 지원

trainingnavtop=true
startpage=true
next.title=다양한 화면 크기 지원
next.link=screensizes.html

@jd:body

<div id="tb-wrapper"> 
<div id="tb"> 
 
<h2>요구사항과 선행조건</h2> 

<ul>
  <li>Android 1.6 이상(샘플 앱의 경우  2.1 이상)</li>
  <li><a
href="http://developer.android.com/guide/components/activities.html">액티비티</a> 및 <a href="http://developer.android.com/guide/components/fragments.html">프래그먼트</a>에 대한 기본 지식</li>
  <li>Android <a
href="http://developer.android.com/guide/topics/ui/index.html"> 사용자 인터페이스</a> 구축 경험</li>
  <li><a
href="{@docRoot}tools/support-library/index.html">호환성 라이브러리</a>를 사용해야 하는 여러 기능</li>
</ul>

<h2>참고자료</h2>

<ul>
  <li><a href="{@docRoot}guide/practices/screens_support.html">다양한 화면 지원</a></li>
</ul>
 
<h2>다운로드 </h2> 
 
<div class="download-box"> 
<a href="http://developer.android.com/shareables/training/NewsReader.zip" class="button">샘플 앱 다운로드</a>
<p class="filename">NewsReader.zip</p> 
</div> 
 
</div> 
</div> 
 
<p>Android는 소형 휴대전화에서부터 대형 TV에 이르기까지 다양한 화면 크기의 수많은 기기 유형을 지원합니다. 따라서 애플리케이션이 모든 화면 크기와 호환되어 최대한 많은 사용자가 사용할 수 있도록 디자인하는 것이 중요합니다.</p>

<p>하지만 다양한 기기 유형과 호환되는 것만으로는 충분하지 않습니다. 각 화면 크기에 따라 사용자 상호작용에 유리한 점과 불리한 점이 다릅니다. 따라서 사용자에게 만족을 주고 깊은 인상을 심어주려면 애플리케이션이 단지 여러 화면을 <em>지원</em>하는 데 그치지 않고 화면 구성별로 사용자 환경을 <em>최적화</em>해야 합니다.</p>

<p>이번 강의에서는 여러 화면 구성에 최적화된 사용자 인터페이스를 구현하는 방법을 설명합니다.</p>

<p>각 강의에서 사용되는 코드는 여러 화면에 대한 최적화의 모범 사례를 보여주는 샘플 애플리케이션에서 가져온 것입니다. 샘플(오른쪽)을 다운로드하여 본인의 애플리케이션에 코드로 재사용할 수 있습니다. </p>

<p class="note"><strong>참고:</strong> 이 강의 및 강의와 관련된 샘플은 <a
href="{@docRoot}tools/support-library/index.html">호환성 라이브러리</a>를 사용하며 이는 Android 3.0 이하 버전에서 <PH>{@link android.app.Fragment}</PH> API를 사용하기 위해서입니다. 이 강의에서 API를 모두 사용하려면 라이브러리를 다운로드하여 애플리케이션에 추가해야 합니다.</p>
 

<h2>강의</h2> 
 
<dl> 
  <dt><b><a href="screensizes.html">다양한 화면 크기 지원</a></b></dt> 
    <dd>이 강의에서는 여러 다양한 화면 크기에 조정되는 레이아웃을 디자인하는 방법(유연한 보기 크기, <PH>{@link android.widget.RelativeLayout}</PH>, 화면 크기 및 방향 한정자, 별칭 필터 및 나인-패치 비트맵 사용하기)을 안내합니다.</dd> 
 
  <dt><b><a href="screendensities.html">다양한 화면 밀도 지원</a></b></dt> 
    <dd>이 강의에서는 다양한 픽셀 밀도를 가진 화면을 지원하는 방법(밀도 독립형 픽셀(density-independent pixel) 사용하기 및 밀도별로 적합한 비트맵 제공하기)을 설명합니다.</dd> 
 
  <dt><b><a href="adaptui.html">조정형 UI 플로우 구현</a></b></dt> 
    <dd>이 강의에서는 여러 화면 크기/밀도 조합에 조정되도록 UI 플로우를 구현하는 방법(활성 레이아웃의 런타임 감지, 현재 레이아웃에 따른 대응, 화면 구성 변경 처리)을 설명합니다.</dd> 
</dl> 
